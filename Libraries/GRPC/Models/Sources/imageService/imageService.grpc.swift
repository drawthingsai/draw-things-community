//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: imageService.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `ImageGenerationServiceClient`, then call methods of this protocol to make API calls.
public protocol ImageGenerationServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: ImageGenerationServiceClientInterceptorFactoryProtocol? { get }

  func generateImage(
    _ request: ImageGenerationRequest,
    callOptions: CallOptions?,
    handler: @escaping (ImageGenerationResponse) -> Void
  ) -> ServerStreamingCall<ImageGenerationRequest, ImageGenerationResponse>

  func filesExist(
    _ request: FileListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<FileListRequest, FileExistenceResponse>

  func uploadFile(
    callOptions: CallOptions?,
    handler: @escaping (UploadResponse) -> Void
  ) -> BidirectionalStreamingCall<FileUploadRequest, UploadResponse>

  func echo(
    _ request: EchoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<EchoRequest, EchoReply>
}

extension ImageGenerationServiceClientProtocol {
  public var serviceName: String {
    return "ImageGenerationService"
  }

  /// Server streaming call to GenerateImage
  ///
  /// - Parameters:
  ///   - request: Request to send to GenerateImage.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func generateImage(
    _ request: ImageGenerationRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (ImageGenerationResponse) -> Void
  ) -> ServerStreamingCall<ImageGenerationRequest, ImageGenerationResponse> {
    return self.makeServerStreamingCall(
      path: ImageGenerationServiceClientMetadata.Methods.generateImage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateImageInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to FilesExist
  ///
  /// - Parameters:
  ///   - request: Request to send to FilesExist.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func filesExist(
    _ request: FileListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FileListRequest, FileExistenceResponse> {
    return self.makeUnaryCall(
      path: ImageGenerationServiceClientMetadata.Methods.filesExist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFilesExistInterceptors() ?? []
    )
  }

  /// Bidirectional streaming call to UploadFile
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func uploadFile(
    callOptions: CallOptions? = nil,
    handler: @escaping (UploadResponse) -> Void
  ) -> BidirectionalStreamingCall<FileUploadRequest, UploadResponse> {
    return self.makeBidirectionalStreamingCall(
      path: ImageGenerationServiceClientMetadata.Methods.uploadFile.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadFileInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to Echo
  ///
  /// - Parameters:
  ///   - request: Request to send to Echo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func echo(
    _ request: EchoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EchoRequest, EchoReply> {
    return self.makeUnaryCall(
      path: ImageGenerationServiceClientMetadata.Methods.echo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEchoInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension ImageGenerationServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "ImageGenerationServiceNIOClient")
public final class ImageGenerationServiceClient: ImageGenerationServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: ImageGenerationServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: ImageGenerationServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ImageGenerationService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: ImageGenerationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct ImageGenerationServiceNIOClient: ImageGenerationServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: ImageGenerationServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the ImageGenerationService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: ImageGenerationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol ImageGenerationServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: ImageGenerationServiceClientInterceptorFactoryProtocol? { get }

  func makeGenerateImageCall(
    _ request: ImageGenerationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<ImageGenerationRequest, ImageGenerationResponse>

  func makeFilesExistCall(
    _ request: FileListRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FileListRequest, FileExistenceResponse>

  func makeUploadFileCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<FileUploadRequest, UploadResponse>

  func makeEchoCall(
    _ request: EchoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<EchoRequest, EchoReply>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension ImageGenerationServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return ImageGenerationServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: ImageGenerationServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGenerateImageCall(
    _ request: ImageGenerationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<ImageGenerationRequest, ImageGenerationResponse> {
    return self.makeAsyncServerStreamingCall(
      path: ImageGenerationServiceClientMetadata.Methods.generateImage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateImageInterceptors() ?? []
    )
  }

  public func makeFilesExistCall(
    _ request: FileListRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FileListRequest, FileExistenceResponse> {
    return self.makeAsyncUnaryCall(
      path: ImageGenerationServiceClientMetadata.Methods.filesExist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFilesExistInterceptors() ?? []
    )
  }

  public func makeUploadFileCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<FileUploadRequest, UploadResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: ImageGenerationServiceClientMetadata.Methods.uploadFile.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadFileInterceptors() ?? []
    )
  }

  public func makeEchoCall(
    _ request: EchoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<EchoRequest, EchoReply> {
    return self.makeAsyncUnaryCall(
      path: ImageGenerationServiceClientMetadata.Methods.echo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEchoInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension ImageGenerationServiceAsyncClientProtocol {
  public func generateImage(
    _ request: ImageGenerationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<ImageGenerationResponse> {
    return self.performAsyncServerStreamingCall(
      path: ImageGenerationServiceClientMetadata.Methods.generateImage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateImageInterceptors() ?? []
    )
  }

  public func filesExist(
    _ request: FileListRequest,
    callOptions: CallOptions? = nil
  ) async throws -> FileExistenceResponse {
    return try await self.performAsyncUnaryCall(
      path: ImageGenerationServiceClientMetadata.Methods.filesExist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFilesExistInterceptors() ?? []
    )
  }

  public func uploadFile<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<UploadResponse> where RequestStream: Sequence, RequestStream.Element == FileUploadRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: ImageGenerationServiceClientMetadata.Methods.uploadFile.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadFileInterceptors() ?? []
    )
  }

  public func uploadFile<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<UploadResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == FileUploadRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: ImageGenerationServiceClientMetadata.Methods.uploadFile.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUploadFileInterceptors() ?? []
    )
  }

  public func echo(
    _ request: EchoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> EchoReply {
    return try await self.performAsyncUnaryCall(
      path: ImageGenerationServiceClientMetadata.Methods.echo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEchoInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct ImageGenerationServiceAsyncClient: ImageGenerationServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: ImageGenerationServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: ImageGenerationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol ImageGenerationServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'generateImage'.
  func makeGenerateImageInterceptors() -> [ClientInterceptor<ImageGenerationRequest, ImageGenerationResponse>]

  /// - Returns: Interceptors to use when invoking 'filesExist'.
  func makeFilesExistInterceptors() -> [ClientInterceptor<FileListRequest, FileExistenceResponse>]

  /// - Returns: Interceptors to use when invoking 'uploadFile'.
  func makeUploadFileInterceptors() -> [ClientInterceptor<FileUploadRequest, UploadResponse>]

  /// - Returns: Interceptors to use when invoking 'echo'.
  func makeEchoInterceptors() -> [ClientInterceptor<EchoRequest, EchoReply>]
}

public enum ImageGenerationServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ImageGenerationService",
    fullName: "ImageGenerationService",
    methods: [
      ImageGenerationServiceClientMetadata.Methods.generateImage,
      ImageGenerationServiceClientMetadata.Methods.filesExist,
      ImageGenerationServiceClientMetadata.Methods.uploadFile,
      ImageGenerationServiceClientMetadata.Methods.echo,
    ]
  )

  public enum Methods {
    public static let generateImage = GRPCMethodDescriptor(
      name: "GenerateImage",
      path: "/ImageGenerationService/GenerateImage",
      type: GRPCCallType.serverStreaming
    )

    public static let filesExist = GRPCMethodDescriptor(
      name: "FilesExist",
      path: "/ImageGenerationService/FilesExist",
      type: GRPCCallType.unary
    )

    public static let uploadFile = GRPCMethodDescriptor(
      name: "UploadFile",
      path: "/ImageGenerationService/UploadFile",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let echo = GRPCMethodDescriptor(
      name: "Echo",
      path: "/ImageGenerationService/Echo",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol ImageGenerationServiceProvider: CallHandlerProvider {
  var interceptors: ImageGenerationServiceServerInterceptorFactoryProtocol? { get }

  func generateImage(request: ImageGenerationRequest, context: StreamingResponseCallContext<ImageGenerationResponse>) -> EventLoopFuture<GRPCStatus>

  func filesExist(request: FileListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<FileExistenceResponse>

  func uploadFile(context: StreamingResponseCallContext<UploadResponse>) -> EventLoopFuture<(StreamEvent<FileUploadRequest>) -> Void>

  func echo(request: EchoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<EchoReply>
}

extension ImageGenerationServiceProvider {
  public var serviceName: Substring {
    return ImageGenerationServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GenerateImage":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ImageGenerationRequest>(),
        responseSerializer: ProtobufSerializer<ImageGenerationResponse>(),
        interceptors: self.interceptors?.makeGenerateImageInterceptors() ?? [],
        userFunction: self.generateImage(request:context:)
      )

    case "FilesExist":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FileListRequest>(),
        responseSerializer: ProtobufSerializer<FileExistenceResponse>(),
        interceptors: self.interceptors?.makeFilesExistInterceptors() ?? [],
        userFunction: self.filesExist(request:context:)
      )

    case "UploadFile":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FileUploadRequest>(),
        responseSerializer: ProtobufSerializer<UploadResponse>(),
        interceptors: self.interceptors?.makeUploadFileInterceptors() ?? [],
        observerFactory: self.uploadFile(context:)
      )

    case "Echo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EchoRequest>(),
        responseSerializer: ProtobufSerializer<EchoReply>(),
        interceptors: self.interceptors?.makeEchoInterceptors() ?? [],
        userFunction: self.echo(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol ImageGenerationServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: ImageGenerationServiceServerInterceptorFactoryProtocol? { get }

  func generateImage(
    request: ImageGenerationRequest,
    responseStream: GRPCAsyncResponseStreamWriter<ImageGenerationResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  func filesExist(
    request: FileListRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> FileExistenceResponse

  func uploadFile(
    requestStream: GRPCAsyncRequestStream<FileUploadRequest>,
    responseStream: GRPCAsyncResponseStreamWriter<UploadResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  func echo(
    request: EchoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> EchoReply
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension ImageGenerationServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return ImageGenerationServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return ImageGenerationServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: ImageGenerationServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GenerateImage":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ImageGenerationRequest>(),
        responseSerializer: ProtobufSerializer<ImageGenerationResponse>(),
        interceptors: self.interceptors?.makeGenerateImageInterceptors() ?? [],
        wrapping: { try await self.generateImage(request: $0, responseStream: $1, context: $2) }
      )

    case "FilesExist":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FileListRequest>(),
        responseSerializer: ProtobufSerializer<FileExistenceResponse>(),
        interceptors: self.interceptors?.makeFilesExistInterceptors() ?? [],
        wrapping: { try await self.filesExist(request: $0, context: $1) }
      )

    case "UploadFile":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FileUploadRequest>(),
        responseSerializer: ProtobufSerializer<UploadResponse>(),
        interceptors: self.interceptors?.makeUploadFileInterceptors() ?? [],
        wrapping: { try await self.uploadFile(requestStream: $0, responseStream: $1, context: $2) }
      )

    case "Echo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EchoRequest>(),
        responseSerializer: ProtobufSerializer<EchoReply>(),
        interceptors: self.interceptors?.makeEchoInterceptors() ?? [],
        wrapping: { try await self.echo(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol ImageGenerationServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'generateImage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGenerateImageInterceptors() -> [ServerInterceptor<ImageGenerationRequest, ImageGenerationResponse>]

  /// - Returns: Interceptors to use when handling 'filesExist'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFilesExistInterceptors() -> [ServerInterceptor<FileListRequest, FileExistenceResponse>]

  /// - Returns: Interceptors to use when handling 'uploadFile'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUploadFileInterceptors() -> [ServerInterceptor<FileUploadRequest, UploadResponse>]

  /// - Returns: Interceptors to use when handling 'echo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEchoInterceptors() -> [ServerInterceptor<EchoRequest, EchoReply>]
}

public enum ImageGenerationServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ImageGenerationService",
    fullName: "ImageGenerationService",
    methods: [
      ImageGenerationServiceServerMetadata.Methods.generateImage,
      ImageGenerationServiceServerMetadata.Methods.filesExist,
      ImageGenerationServiceServerMetadata.Methods.uploadFile,
      ImageGenerationServiceServerMetadata.Methods.echo,
    ]
  )

  public enum Methods {
    public static let generateImage = GRPCMethodDescriptor(
      name: "GenerateImage",
      path: "/ImageGenerationService/GenerateImage",
      type: GRPCCallType.serverStreaming
    )

    public static let filesExist = GRPCMethodDescriptor(
      name: "FilesExist",
      path: "/ImageGenerationService/FilesExist",
      type: GRPCCallType.unary
    )

    public static let uploadFile = GRPCMethodDescriptor(
      name: "UploadFile",
      path: "/ImageGenerationService/UploadFile",
      type: GRPCCallType.bidirectionalStreaming
    )

    public static let echo = GRPCMethodDescriptor(
      name: "Echo",
      path: "/ImageGenerationService/Echo",
      type: GRPCCallType.unary
    )
  }
}
